Тестовое задание


Описание задачи


Создать API для CRUD-a постов блога на Laravel.



Аутентифицированный пользователь должен:

видеть полный список постов, в том числе тех, автором которых не является;
создать новый пост;
редактировать ТОЛЬКО свои посты;
удалять ТОЛЬКО свои посты.


На выходе мы ожидаем следующие данные:

API аутентификации/регистрации.
API доступные после аутентификации/регистрации для любого пользователя:
списка постов:
Список постов со следующими колонками:
ID
Наименование поста
Имя автора
Описание (первые 128 символов)
стандартная пагинация (10 штук).
создания поста.
редактирования поста.
API создания/редактирования поста должна содержать поля:

title (required);
body (required);


Требования к хранимым данным


В базе данных вы должны хранить таблицы:

users;
posts. Таблица должна содержать следующие поля:
id;
user_id;
dummy_post_id;
created_at;
updated_at;
deleted_at.
прочие таблицы генерируемые самой Laravel.
Для хранения и чтения остальной информации необходимо использовать https://dummyjson.com/.

К сожалению dummyjson не имеет ендпойта для получения списка постов по массиву идентификаторов. Поэтому, когда вы будете отображать список постов вы должны брать данные из локальной таблицы постов, а затем по dummy_post_id запрашивать полный набор информации по очереди.



Технические требования
Для запуска проекта необходимо использовать Laravel Sail, соответственно проект должен легко подыматься через Docker.
В качестве БД использовать PostgreSQL.
Инструкция по тому как развернуть проект нужно детально описать в Readme-файле.
Результат работы выложить на Github и передать ссылку.


Критерии оценки
Качество разделение логики.
Время выполнения.
В Readme четко расписано как быстрым образом развернуть проект.


Срок выполнения задачи
72 часа с момента получения задания.



P.S. Данное тестовое задание поможет нам понять как вы организуете работу в тех случая, когда не являетесь полным владельцем данных и будете взаимодействовать с микро-сервисами. Желаем Вам удачи!

